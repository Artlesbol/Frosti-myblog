---
import { Icon } from "astro-icon/components";
const { url } = Astro.props;
---

<!-- ---
/**
 * 组件：GithubInfo
 * 文件路径：/home/llb/artlesbol.top/src/widget/GithubInfo.astro
 * 
 * 描述：
 * 该组件用于显示 GitHub 仓库的信息，包括用户、星标数和分叉数。
 * 
 * 属性：
 * - class: 自定义 CSS 类，用于设置组件的样式。
 * - data-url: GitHub 仓库的 URL，用于获取仓库信息。
 * 
 * 子组件：
 * - Icon: 用于显示图标。
 * - span: 用于显示加载状态和文本信息。
 * 
 * 样式：
 * - flex: 设置为弹性布局。
 * - gap-4: 设置子元素之间的间距为 4。
 * - items-center: 子元素垂直居中对齐。
 * - gap-1: 设置子元素之间的间距为 1。
 * - w-4 h-4: 设置图标的宽度和高度为 4。
 * - text-sm: 设置文本的字体大小为小号。
 * - loading loading-spinner loading-xs: 设置加载状态的样式。
 */
--- -->
<github-info class="flex gap-4" data-url={url}>
  <span class="repo-user flex items-center gap-1">
    <Icon name="ri:user-line" class="w-4 h-4" />
    <span class="text-sm">
      <span class="loading loading-spinner loading-xs"></span>
    </span>
  </span>
  <span class="repo-star flex items-center gap-1">
    <Icon name="ri:star-line" class="w-4 h-4" />
    <span class="text-sm">
      <span class="loading loading-spinner loading-xs"></span>
    </span>
  </span>
  <span class="repo-fork flex items-center gap-1">
    <Icon name="ri:git-fork-line" class="w-4 h-4" />
    <span class="text-sm">
      <span class="loading loading-spinner loading-xs"></span>
    </span>
  </span>
</github-info>

<!-- /**
 * 自定义 Web 组件: <github-info>
 * 
 * 该组件根据提供的 URL 获取并显示 GitHub 仓库信息。
 * 
 * 属性:
 * - data-url: 要获取信息的 GitHub 仓库的 URL。
 * 
 * 依赖:
 * - formatNumber: 一个用于格式化数字的工具函数。
 * - getRepoInfoFromUrl: 一个用于从 GitHub URL 中提取所有者和仓库名称的工具函数。
 * 
 * 功能:
 * - 在连接到 DOM 时，组件从 GitHub API 获取仓库信息。
 * - 它更新类名为 "repo-user"、"repo-fork" 和 "repo-star" 的元素的内部文本，分别为仓库所有者的登录名、分叉数和星标数。
 * - 通过将错误记录到控制台来处理错误。
 * 
 * 示例用法:
 * <github-info data-url="https://github.com/owner/repo"></github-info>
 */ -->
<script>
  import { formatNumber } from "../utils/formatNumber";
  import { getRepoInfoFromUrl } from "../utils/github";

  class GithubInfo extends HTMLElement {
    connectedCallback() {
      const repoUrl = this.dataset.url;
      if (!repoUrl) return;

      const { owner, repo } = getRepoInfoFromUrl(repoUrl);
      const apiUrl = `https://api.github.com/repos/${owner}/${repo}`;

      fetch(apiUrl)
        .then((response) => {
          if (!response.ok) throw new Error("Failed to fetch repository info.");
          return response.json();
        })
        .then((data) => {
          this.querySelector(".repo-user span")!.textContent = data.owner.login;
          this.querySelector(".repo-fork span")!.textContent = formatNumber(data.forks_count);
          this.querySelector(".repo-star span")!.textContent = formatNumber(data.stargazers_count);
        })
        .catch((error) => {
          console.error("Error fetching repository info:", error);
        });
    }
  }

  customElements.define("github-info", GithubInfo);
</script>
